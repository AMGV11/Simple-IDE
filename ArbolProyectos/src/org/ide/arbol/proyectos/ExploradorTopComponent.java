package org.ide.arbol.proyectos;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectManager;
import org.netbeans.api.project.ui.OpenProjects;
import org.netbeans.spi.project.ui.*;
import org.netbeans.spi.project.ui.support.CommonProjectActions;
import org.openide.util.NbBundle.Messages;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.FilterNode;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "ExploradorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.ide.arbol.proyectos.ExploradorTopComponent")
@ActionReference(path = "Menu/Window", position = 10)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExploradorAction",
        preferredID = "ExploradorTopComponent"
)
@Messages({
    "CTL_ExploradorAction=Explorador",
    "CTL_ExploradorTopComponent=Proyectos",
    "HINT_ExploradorTopComponent=This is a Explorador window"
})
public class ExploradorTopComponent extends TopComponent implements ExplorerManager.Provider {

    private final ExplorerManager mgr = new ExplorerManager();

    public ExploradorTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExploradorTopComponent()); // Nombre interno
        setDisplayName(Bundle.CTL_ExploradorTopComponent()); // Nombre visible en la pestaña
        setToolTipText(Bundle.HINT_ExploradorTopComponent()); // Tooltip
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));

        OpenProjects.getDefault().addPropertyChangeListener(evt -> {
            if (OpenProjects.PROPERTY_OPEN_PROJECTS.equals(evt.getPropertyName())) {
                mgr.setRootContext(Node.EMPTY);
                
                try {
                    refreshExplorer(); // Actualiza tu árbol cuando se abre un proyecto
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });

        // Agregar un solo listener al árbol
        treeView.getViewport().getView().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) { // Detecta doble clic
                    Node[] selectedNodes = mgr.getSelectedNodes();
                    if (selectedNodes.length == 1) {
                        Node selectedNode = selectedNodes[0];
                        Project project = selectedNode.getLookup().lookup(Project.class);
                        if (project != null) {
                            JOptionPane.showMessageDialog(null, "Proyecto: "
                                    + project.getProjectDirectory().getPath());
                        }
                    }
                }
            }
        });

        // Carga los archivos después de que el constructor haya terminado
        SwingUtilities.invokeLater(() -> {
            treeView.setRootVisible(false);

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        treeView = new org.openide.explorer.view.BeanTreeView();
        Refrescar = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(Refrescar, org.openide.util.NbBundle.getMessage(ExploradorTopComponent.class, "ExploradorTopComponent.Refrescar.text")); // NOI18N
        Refrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefrescarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(154, Short.MAX_VALUE)
                .addComponent(Refrescar)
                .addContainerGap())
            .addComponent(treeView, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(treeView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Refrescar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void RefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefrescarActionPerformed
        try {
            refreshExplorer();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_RefrescarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Refrescar;
    private javax.swing.JPanel jPanel1;
    private org.openide.explorer.view.BeanTreeView treeView;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
        /*File dir = new File("C:\\Users\\anton\\Desktop\\Prueba IDE\\WordEditorCore");
        FileObject fo = FileUtil.toFileObject(FileUtil.normalizeFile(dir));
        Project project = null;
        
        try {
            project = ProjectManager.getDefault().findProject(fo);
        } catch (IOException | IllegalArgumentException ex) {
            Exceptions.printStackTrace(ex);
        }
        if (project != null) {
            OpenProjects.getDefault().open(new Project[]{project}, false);
            System.out.println("Proyecto Abierto");
        }*/
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    public void refreshExplorer() throws IOException {
        mgr.setRootContext(Node.EMPTY);
        
        // Obtener todos los proyectos abiertos SIN duplicados
        Project[] openProjects = OpenProjects.getDefault().getOpenProjects();

        // Creamos un Set para evitar duplicados (opcional, OpenProjects ya los filtra normalmente)
        Set<Project> uniqueProjects = new HashSet<>(Arrays.asList(openProjects));

        // Mapeamos los nodos de los proyectos abiertos
        Node[] projectNodes = uniqueProjects.stream()
                    .map(this::createProjectNode)
                    .filter(n -> n != null)
                    .toArray(Node[]::new);

        Node root = new AbstractNode(new NodeChildren(projectNodes));
        mgr.setRootContext(root);
        treeView.setRootVisible(false);
    }

    private Node createProjectNode(Project project) {
        LogicalViewProvider viewProvider = project.getLookup().lookup(LogicalViewProvider.class);

        if (viewProvider != null) {
            Node logicalView = viewProvider.createLogicalView();

            // Personaliza todos los nodos hijos si quieres aplicar el cambio de forma global
            return new FilterNode(logicalView, new FilterNode.Children(logicalView) {
                @Override
                protected Node[] createNodes(Node key) {
                    FileObject fo = key.getLookup().lookup(FileObject.class);
                    if (fo.isFolder()) {
                        return new Node[]{ new FolderNode(fo) };
                    } else {
                        return new Node[]{ new FileNode(fo) };
                    }
                }
            });
        }

        return null;
    }

    /*private void openFileInEditor(FileObject fileObject) {
        SwingUtilities.invokeLater(() -> {
            EditorTopComponent editor = new EditorTopComponent();
            editor.open();
            editor.requestActive();
            try {

                editor.loadFile(fileObject);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        });
    }*/

    private static class NodeChildren extends Children.Keys<Node> {

        private final Node[] nodes;

        NodeChildren(Node[] nodes) {
            this.nodes = nodes;
        }

        @Override
        protected void addNotify() {
            setKeys(nodes);
        }

        @Override
        protected Node[] createNodes(Node key) {
            return new Node[]{key};
        }
    }

    /*private  Node buildProjectsRootNode(File folder) {
    Children children = new Children.Array();
    Node root = new AbstractNode(children);
    root.setDisplayName("Proyectos en " + folder.getAbsolutePath());

    File[] dirs = folder.listFiles(File::isDirectory);
    if (dirs == null) return root;

    for (File dir : dirs) {
        if (JavaProjectDetector.hasJavaFiles(dir)) {
            Node projectNode = new JavaProjectNode(dir);
            children.add(new Node[]{new JavaProjectNode(dir)});
        }
    }

    return root;
}*/
}
