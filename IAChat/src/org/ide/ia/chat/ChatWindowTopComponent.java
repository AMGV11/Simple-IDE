/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/templateTopComponent637.java to edit this template
 */
package org.ide.ia.chat;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.util.Arrays;
import java.util.Properties;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.ide.ia.chat//ChatWindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ChatWindowTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "org.ide.ia.chat.ChatWindowTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ChatWindowAction",
        preferredID = "ChatWindowTopComponent"
)
@Messages({
    "CTL_ChatWindowAction=ChatWindow",
    "CTL_ChatWindowTopComponent=Chat IA",
    "HINT_ChatWindowTopComponent=This is a ChatWindow window"
})
public final class ChatWindowTopComponent extends TopComponent {

    public ChatWindowTopComponent() {
        initComponents();
        setName(Bundle.CTL_ChatWindowTopComponent());
        setToolTipText(Bundle.HINT_ChatWindowTopComponent());
        
        SendButton.addActionListener(e -> sendMessage());
        UserText.addActionListener(e -> sendMessage());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane(chat,
            jScrollPane1.VERTICAL_SCROLLBAR_AS_NEEDED,
            jScrollPane1.HORIZONTAL_SCROLLBAR_NEVER);
        chat = new javax.swing.JTextArea();
        UserText = new javax.swing.JTextField();
        SendButton = new javax.swing.JButton();

        chat.setEditable(false);
        chat.setColumns(20);
        chat.setLineWrap(true);
        chat.setRows(5);
        chat.setWrapStyleWord(true);
        jScrollPane1.setViewportView(chat);

        UserText.setText(org.openide.util.NbBundle.getMessage(ChatWindowTopComponent.class, "ChatWindowTopComponent.UserText.text")); // NOI18N
        UserText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserTextActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(SendButton, org.openide.util.NbBundle.getMessage(ChatWindowTopComponent.class, "ChatWindowTopComponent.SendButton.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UserText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SendButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SendButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void UserTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserTextActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SendButton;
    private javax.swing.JTextField UserText;
    private javax.swing.JTextArea chat;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
        private void sendMessage() {
        String userInput = UserText.getText().trim();
        
        if (userInput.isEmpty()) return;

        chat.append("Tú: " + userInput + "\n\n");
        UserText.setText("");
        mostrarAnimacionEspera(); // justo antes de hacer la llamada a la IA
        // Llamada a Ollama en un hilo separado
        new Thread(() -> {
            try {
                String response = askOllama(userInput);
                SwingUtilities.invokeLater(() -> {
                    ocultarAnimacionEspera(); // después de recibir la respuesta
                    chat.append("\nQwen: " + response + "\n\n");
                });
            } catch (Exception ex) {
                SwingUtilities.invokeLater(() -> {
                    ocultarAnimacionEspera(); // después de recibir la respuesta
                    chat.append("⚠️ Error: " + ex.getMessage() + "\n\n");
                });
            }
        }).start();
    }
        
    private String askOllama(String prompt) throws IOException, org.json.simple.parser.ParseException {
        // Construcción del JSON usando JSON.simple
        JSONObject json = new JSONObject();
        json.put("model", "qwen2.5-coder:latest");
        json.put("system", "Eres Qwen, y ayudaras a programadores principiantes Java");
        json.put("prompt", prompt); // No necesitas escapar manualmente, JSON.simple lo hace
        json.put("stream", false);

        URL url = new URL("http://localhost:11434/api/generate");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json");

        try (OutputStream os = conn.getOutputStream()) {
            os.write(json.toJSONString().getBytes(StandardCharsets.UTF_8));
        }

        if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
            throw new IOException("Error al contactar Ollama: " + conn.getResponseCode());
        }

        try (InputStream is = conn.getInputStream()) {
            String responseBody = new String(is.readAllBytes(), StandardCharsets.UTF_8);

            // Parsear la respuesta JSON
            JSONParser parser = new JSONParser();
            JSONObject responseJson = (JSONObject) parser.parse(responseBody);
            String rawResponse = (String) responseJson.get("response");
            return rawResponse != null ? rawResponse.replace("\\n", "\n") : "";
        }
    }
        
    private Timer animacionTimer;
    private String baseTextoAnimacion = "Esperando respuesta";

    private void mostrarAnimacionEspera() {
    animacionTimer = new Timer(500, new ActionListener() {
        int puntos = 0;

        @Override
        public void actionPerformed(ActionEvent e) {
            puntos = (puntos + 1) % 4;
            String dots = ".".repeat(puntos);
            String nuevaLinea = baseTextoAnimacion + dots;

            // Reemplaza la última línea del JTextArea
            String[] lineas = chat.getText().split("\n");
            lineas[lineas.length - 1] = nuevaLinea;
            chat.setText(String.join("\n", lineas));
        }
    });

    // Añade línea inicial antes de empezar
    chat.append(baseTextoAnimacion + "\n");
    animacionTimer.start();
}
    
    private void ocultarAnimacionEspera() {
    if (animacionTimer != null && animacionTimer.isRunning()) {
        animacionTimer.stop();
    }

    // Opcional: borrar la línea de "esperando..."
    String[] lineas = chat.getText().split("\n");
    if (lineas.length > 0 && lineas[lineas.length - 1].startsWith(baseTextoAnimacion)) {
        chat.setText(String.join("\n", Arrays.copyOf(lineas, lineas.length - 1)));
    }
}
   

}
