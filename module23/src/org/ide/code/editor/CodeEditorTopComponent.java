/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/templateTopComponent637.java to edit this template
 */
package org.ide.code.editor;

import java.awt.BorderLayout;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import javax.swing.Action;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.fife.rsta.ac.LanguageSupport;
import org.fife.rsta.ac.java.buildpath.LibraryInfo;
import org.fife.rsta.ac.LanguageSupportFactory;
import org.fife.rsta.ac.java.JarManager;
import org.fife.rsta.ac.java.JavaLanguageSupport;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rtextarea.*;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileObject;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.fife.ui.autocomplete.AutoCompletion;

/**
 * Top component which displays something.
 */

@TopComponent.Description(
        preferredID = "EditorTopComponent",
       // iconBase="OpenFileIcon",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.ide.code.editor.CodeEditorTopComponent") 
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EditorAction",
        preferredID = "EditorTopComponent"
)
@Messages({
    "CTL_EditorAction=Editor",
    "CTL_EditorTopComponent=Editor Window",
    "HINT_EditorTopComponent=This is a Code Editor window"
})
public final class CodeEditorTopComponent extends TopComponent {
    
    private FileObject currentFO = null;
    private boolean modifiedState = false;
    
    public CodeEditorTopComponent() throws IOException {
        initComponents();
        setName(Bundle.CTL_EditorTopComponent());
        setToolTipText(Bundle.HINT_EditorTopComponent());
        
        rSyntaxTextArea1.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA); // Puedes cambiarlo según el tipo de archivo
        rSyntaxTextArea1.setCodeFoldingEnabled(true);
        rSyntaxTextArea1.setAntiAliasingEnabled(true);
        
        JavaLanguageSupport javaLanguageSupport = new JavaLanguageSupport();
        javaLanguageSupport.getJarManager().addClassFileSource(new JDK9ClasspathLibraryInfo());

        javaLanguageSupport.install(rSyntaxTextArea1);
        
        RTextScrollPane sp = new RTextScrollPane(rSyntaxTextArea1);
        setLayout(new BorderLayout());
        add(sp, BorderLayout.CENTER);

    }
    
    public CodeEditorTopComponent(FileObject fileObject) throws IOException {
        initComponents();
        setName(Bundle.CTL_EditorTopComponent());
        setToolTipText(Bundle.HINT_EditorTopComponent());
        
        rSyntaxTextArea1.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA); // Puedes cambiarlo según el tipo de archivo
        rSyntaxTextArea1.setCodeFoldingEnabled(true);
        rSyntaxTextArea1.setAntiAliasingEnabled(true);
        
        JavaLanguageSupport javaLanguageSupport = new JavaLanguageSupport();
        javaLanguageSupport.getJarManager().addClassFileSource(new JDK9ClasspathLibraryInfo());

        // ¡Instálalo directamente!
        javaLanguageSupport.install(rSyntaxTextArea1);
        
        RTextScrollPane sp = new RTextScrollPane(rSyntaxTextArea1);
        setLayout(new BorderLayout());
        add(sp, BorderLayout.CENTER);
        
        loadFile(fileObject);
        
        rSyntaxTextArea1.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                setModifiedState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                setModifiedState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                setModifiedState();
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        rSyntaxTextArea1 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();

        rSyntaxTextArea1.setColumns(20);
        rSyntaxTextArea1.setRows(5);
        jScrollPane1.setViewportView(rSyntaxTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea rSyntaxTextArea1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
        private static JMenuBar createMenuBar(RSyntaxTextArea textArea) {

        JMenuBar menuBar = new JMenuBar();

        JMenu editMenu = new JMenu("Edit");
        editMenu.add(createMenuItem(RTextArea.getAction(RTextArea.UNDO_ACTION)));
        editMenu.add(createMenuItem(RTextArea.getAction(RTextArea.REDO_ACTION)));
        editMenu.addSeparator();
        editMenu.add(createMenuItem(RTextArea.getAction(RTextArea.CUT_ACTION)));
        editMenu.add(createMenuItem(RTextArea.getAction(RTextArea.COPY_ACTION)));
        editMenu.add(createMenuItem(RTextArea.getAction(RTextArea.PASTE_ACTION)));
        editMenu.add(createMenuItem(RTextArea.getAction(RTextArea.DELETE_ACTION)));
        editMenu.addSeparator();
        editMenu.add(createMenuItem(RTextArea.getAction(RTextArea.SELECT_ALL_ACTION)));
        menuBar.add(editMenu);

        return menuBar;
    }

    private static JMenuItem createMenuItem(Action action) {
        JMenuItem item = new JMenuItem(action);
        item.setToolTipText(null); // Swing annoyingly adds tool tip text to the menu item
        return item;
    }
    
    public void loadFile(FileObject fileObject) throws IOException {
        try (InputStream in = fileObject.getInputStream();
                
            Reader reader = new InputStreamReader(in, "UTF-8")) {
            
                rSyntaxTextArea1.read(reader, null);
                setDisplayName(fileObject.getNameExt()); // Cambiar el título del editor
                currentFO = fileObject;
                rSyntaxTextArea1.getDocument().addDocumentListener(new DocumentListener(){
                    
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        setModifiedState();
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        setModifiedState();
                    }

                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        setModifiedState();
                    }

                });
            }
    }
    
    public void saveFile() throws IOException {
        try (OutputStream out = currentFO.getOutputStream();
            Writer writer = new OutputStreamWriter(out, "UTF-8")) {
                rSyntaxTextArea1.write(writer);
            }
    }
    
    public FileObject getCurrentFO (){
        return currentFO;
    }
    
    private void setModifiedState() {
        if (!modifiedState) {
            modifiedState = true;
            updateTitle(true);
        }
    }
    
    private void updateTitle(boolean modificado) {
        if (currentFO!=null){
            String name = currentFO.getNameExt();
            if (modificado) {
                setHtmlDisplayName("<html><b>*" + name + "</b></html>");
            } else {
                setHtmlDisplayName("<html>" + name + "</html>");
            }
        }
    }
    
    public void setState(boolean state){
        modifiedState = state;
        updateTitle (modifiedState);
    }

}
