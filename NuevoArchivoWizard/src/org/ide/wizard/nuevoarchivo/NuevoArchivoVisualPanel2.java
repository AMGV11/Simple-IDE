/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/visualPanel.java to edit this template
 */
package org.ide.wizard.nuevoarchivo;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JPanel;
import org.netbeans.api.project.Project;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

public final class NuevoArchivoVisualPanel2 extends JPanel {

    /**
     * Creates new form NuevoArchivoVisualPanel2
     */
    private final int aux = 1;
    
    public NuevoArchivoVisualPanel2() {
        initComponents();
    }

    @Override
    public String getName() {
        return "Paso 2";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombreField = new javax.swing.JTextField();
        nombreArchivoLabel = new javax.swing.JLabel();
        carpetaComboBox = new javax.swing.JComboBox<>();
        carpetaLabel = new javax.swing.JLabel();
        introduccionLabel = new javax.swing.JLabel();

        nombreField.setText(org.openide.util.NbBundle.getMessage(NuevoArchivoVisualPanel2.class, "NuevoArchivoVisualPanel2.nombreField.text")); // NOI18N
        nombreField.setPreferredSize(new java.awt.Dimension(72, 22));

        org.openide.awt.Mnemonics.setLocalizedText(nombreArchivoLabel, org.openide.util.NbBundle.getMessage(NuevoArchivoVisualPanel2.class, "NuevoArchivoVisualPanel2.nombreArchivoLabel.text")); // NOI18N

        carpetaComboBox.setMinimumSize(new java.awt.Dimension(70, 22));

        org.openide.awt.Mnemonics.setLocalizedText(carpetaLabel, org.openide.util.NbBundle.getMessage(NuevoArchivoVisualPanel2.class, "NuevoArchivoVisualPanel2.carpetaLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(introduccionLabel, org.openide.util.NbBundle.getMessage(NuevoArchivoVisualPanel2.class, "NuevoArchivoVisualPanel2.introduccionLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nombreArchivoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(carpetaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(carpetaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nombreField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(introduccionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(introduccionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreArchivoLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carpetaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carpetaLabel))
                .addGap(94, 94, 94))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<FileObject> carpetaComboBox;
    private javax.swing.JLabel carpetaLabel;
    private javax.swing.JLabel introduccionLabel;
    private javax.swing.JLabel nombreArchivoLabel;
    private javax.swing.JTextField nombreField;
    // End of variables declaration//GEN-END:variables
    
    private FileObject getSrcFolder(Project proyecto){
        FileObject projectRootFolder = proyecto.getProjectDirectory();
        FileObject srcFolder = projectRootFolder.getFileObject("src");
        return srcFolder;
    }
    
    public String getNombre(){        
        return nombreField.getText();
    }
    
    public FileObject getCarpeta(){ 
        return (FileObject) carpetaComboBox.getSelectedItem();
    }
    
    public boolean cargarCarpetas(Project proyecto) {
        FileObject srcFolder = getSrcFolder(proyecto);
        List<FileObject> paquetes = new ArrayList<>();
        buscarPaquetesRecursivos(srcFolder, paquetes);
        
        // Comprobamos que "paquetes" tenga mas de una carpeta. Si no la tiene, no dejamos continuar.
        if (paquetes.size() == aux){
            DialogDisplayer.getDefault().notify(
                new NotifyDescriptor.Message(
                "El proyecto no tiene paquetes creados. La creación de fichero puede fallar.",
                NotifyDescriptor.WARNING_MESSAGE
                )  
            );
            return false;
        }

        // Creamos el modelo de ComboBox con los nombres tipo "es.uned.cliente"
        DefaultComboBoxModel<FileObject> model = new DefaultComboBoxModel<>();
        for (FileObject carpeta : paquetes) {
            model.addElement(carpeta);
        }
        carpetaComboBox.setModel(model);
        
        carpetaComboBox.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                                                          boolean isSelected, boolean cellHasFocus) {
                Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof FileObject) {
                    FileObject folder = (FileObject) value;
                    String path = FileUtil.getRelativePath(srcFolder, folder);
                    setText(path.replace('/', '.'));
                }
                return c;
            }
        });
        
        return true;
    }

    // Recursivamente buscamos carpetas que contengan al menos un archivo .java
    private boolean buscarPaquetesRecursivos(FileObject carpeta, List<FileObject> resultado) {
        for (FileObject child : carpeta.getChildren()) {
            if (child.isFolder()) {
                buscarPaquetesRecursivos(child, resultado);
            }
        }
        
        /*if (resultado.isEmpty()) { 
            DialogDisplayer.getDefault().notify(
                new NotifyDescriptor.Message(
                "El proyecto no tiene paquetes creados. La creación de fichero puede fallar.",
                NotifyDescriptor.WARNING_MESSAGE
                )  
            );
            return false;
        }*/
        
        resultado.add(carpeta);
        
        return true;

    }
    
}
