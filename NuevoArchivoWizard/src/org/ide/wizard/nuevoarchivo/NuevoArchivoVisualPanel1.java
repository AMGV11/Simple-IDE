/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/visualPanel.java to edit this template
 */
package org.ide.wizard.nuevoarchivo;


import java.awt.Component;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JPanel;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ui.OpenProjects;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;


public final class NuevoArchivoVisualPanel1 extends JPanel {

    /**
     * Creates new form NuevoArchivoVisualPanel1
     */
    
    public NuevoArchivoVisualPanel1() throws IOException {
        initComponents();
            
        avisoLabel.setVisible(false);
        
            FileObject templateRoot = FileUtil.getConfigFile("Templates/Other");
           /* if (templatesFolderFO == null || !templatesFolderFO.isFolder()) {
                return;
            }*/
           
           // Hacer Metodo con esto
            List<FileObject> templates = new ArrayList<>();
            for (FileObject child : templateRoot.getChildren()) {
                if (child.isData()) {
                    templates.add(child);
                }
            }
            
            DefaultComboBoxModel<FileObject> model = new DefaultComboBoxModel<>();
                for (FileObject fo : templates) {
                    model.addElement(fo);
            }
                
        // Asigna la JList al JScrollPane generado por Matisse
        plantillasComboBox.setModel(model);
        
        plantillasComboBox.setRenderer(new DefaultListCellRenderer() {
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            if (value instanceof FileObject) {
                FileObject fo = (FileObject) value;
                setText(fo.getName()); // o fo.getNameExt() si querés incluir la extensión
            }

            return this;
            }
        });
        
        Project[] open = OpenProjects.getDefault().getOpenProjects();
        
        String[] names = new String[open.length];
        for (int i = 0; i < open.length; i++) {
            names[i] = open[i].getProjectDirectory().getNameExt();
        }
        
        proyectosComboBox.setModel(new DefaultComboBoxModel<>(names));
        
    }

    @Override
    public String getName() {
        return "Paso 1";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plantillaLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        introduccionLabel = new javax.swing.JLabel();
        proyectosComboBox = new javax.swing.JComboBox<>();
        plantillasComboBox = new javax.swing.JComboBox<>();
        avisoLabel = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(421, 300));

        org.openide.awt.Mnemonics.setLocalizedText(plantillaLabel, org.openide.util.NbBundle.getMessage(NuevoArchivoVisualPanel1.class, "NuevoArchivoVisualPanel1.plantillaLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(NuevoArchivoVisualPanel1.class, "NuevoArchivoVisualPanel1.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(introduccionLabel, org.openide.util.NbBundle.getMessage(NuevoArchivoVisualPanel1.class, "NuevoArchivoVisualPanel1.introduccionLabel.text")); // NOI18N

        plantillasComboBox.setMinimumSize(new java.awt.Dimension(50, 22));

        org.openide.awt.Mnemonics.setLocalizedText(avisoLabel, org.openide.util.NbBundle.getMessage(NuevoArchivoVisualPanel1.class, "NuevoArchivoVisualPanel1.avisoLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(avisoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(introduccionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(plantillaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proyectosComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(plantillasComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(introduccionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(proyectosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plantillasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plantillaLabel))
                .addGap(44, 44, 44)
                .addComponent(avisoLabel)
                .addGap(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel avisoLabel;
    private javax.swing.JLabel introduccionLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel plantillaLabel;
    private javax.swing.JComboBox<FileObject> plantillasComboBox;
    private javax.swing.JComboBox<String> proyectosComboBox;
    // End of variables declaration//GEN-END:variables

    public Project getProyecto(){
        Project[] open = OpenProjects.getDefault().getOpenProjects();
        
        String[] names = new String[open.length];
        for (int i = 0; i < open.length; i++) {
            names[i] = open[i].getProjectDirectory().getNameExt();
        }
        
        Object sel = proyectosComboBox.getSelectedItem();
        
        int idx = -1;
        for (int i = 0; i < names.length; i++) {
            if (names[i].equals(sel)) {
                idx = i; break;
            }
        }
        Project proyecto = open[idx];
        System.out.println("Proyecto seleccionada: " + proyecto.getProjectDirectory());
    return proyecto;
}

    public FileObject getPlantilla(){
        FileObject seleccion = (FileObject) plantillasComboBox.getSelectedItem();
        System.out.println("Plantilla seleccionada: " + seleccion.getPath());
        
        return seleccion;
    }
    
    private void getListaPlantillas(){
            FileObject templatesFolderFO = FileUtil.getConfigFile("Templates/Other");
            if (templatesFolderFO == null || !templatesFolderFO.isFolder()) {
                return;
            }

            FileObject[] templates = templatesFolderFO.getChildren();
            List<FileObject> templateList = new ArrayList<>();
            for (FileObject fo : templates) {
                if (fo.isData()) {
                    templateList.add(fo);
                }
            }
    }
    
    /* Puede ser usado para una comprobacion automatica
    public void mostrarAviso(Boolean bool) {
        avisoLabel.setVisible(bool);
    }
    
    public boolean comprobarPaquetes(Project proyecto) {
        if (proyecto == null) return false;
        FileObject root = proyecto.getProjectDirectory().getFileObject("src");
        if (root == null) return false;
        for (FileObject child : root.getChildren()) {
            if (child.isFolder()) return true;
        }
        return false;
    }
    
    public void setTienePaquetes(boolean valor) {
    this.tienePaquetes = valor;
    changeSupport.fireChange();
    }
    
    public boolean tienePaquetes() {
    return tienePaquetes;
    }*/
    
}
