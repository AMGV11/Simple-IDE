package org.ide.code.editor;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.ide.code.editor//Editor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "EditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.ide.code.editor.EditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EditorAction",
        preferredID = "EditorTopComponent"
)
@Messages({
    "CTL_EditorAction=Editor",
    "CTL_EditorTopComponent=Editor Window",
    "HINT_EditorTopComponent=This is a Editor window"
})
public final class EditorTopComponent extends TopComponent {

    private FileObject currentFile;

    public EditorTopComponent() {
        this.currentFile = null;
        initComponents();
        setName(Bundle.CTL_EditorTopComponent());
        setToolTipText(Bundle.HINT_EditorTopComponent());
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        CodeEditor = new javax.swing.JTextArea();
        CompAndExec = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();

        CodeEditor.setColumns(20);
        CodeEditor.setRows(5);
        jScrollPane2.setViewportView(CodeEditor);

        org.openide.awt.Mnemonics.setLocalizedText(CompAndExec, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.CompAndExec.text")); // NOI18N
        CompAndExec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompAndExecActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(SaveButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.SaveButton.text")); // NOI18N
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CompAndExec)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SaveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CompAndExec)
                    .addComponent(SaveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void CompAndExecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompAndExecActionPerformed
        String code = CodeEditor.getText();
    String fileName = "TempClass.java";
    
    try {
        // Guardamos el código como un archivo temporal
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            writer.write(code);
        }

        // Obtenemos el compilador de Java
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        if (compiler == null) {
            writeMessage("-- No se encontró el compilador. Asegúrate de estar usando un JDK --");
            return;
        }

        // Compilamos el archivo
        int result = compiler.run(null, null, null, fileName);

        if (result == 0) {
            writeMessage("-- Compilación exitosa --");

            // Configuramos ProcessBuilder con el directorio actual y redirigimos la salida de error
            ProcessBuilder pb = new ProcessBuilder("java", "TempClass");
            pb.directory(new File(".")); // Asegúrate de que el directorio es correcto
            pb.redirectErrorStream(true);
            Process proceso = pb.start();

            // Esperamos a que el proceso termine (opcional)
            BufferedReader output = new BufferedReader(new InputStreamReader(proceso.getInputStream()));
            String line;
            while ((line = output.readLine()) != null) {
                writeMessage(line);
            }
            
            // Esperamos a que finalice el proceso
            proceso.waitFor();
            writeMessage("-- Ejecución terminada --\n");
        } else {
            writeMessage("-- Error al compilar --");
        }

    } catch (IOException | InterruptedException e) {
        Exceptions.printStackTrace(e);
    } finally {
        // Limpiamos el archivo temporal
        new File(fileName).delete();
        new File("TempClass.class").delete();
    }
    }//GEN-LAST:event_CompAndExecActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
         try {
            saveFile(currentFile);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

    }//GEN-LAST:event_SaveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CodeEditor;
    private javax.swing.JButton CompAndExec;
    private javax.swing.JButton SaveButton;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    
    // Obtén o crea una pestaña en la ventana Output con el nombre que desees.
    private static final InputOutput io = IOProvider.getDefault().getIO("Consola", false);
                                            

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public static void writeMessage(String message) throws IOException {
        // Selecciona la pestaña para que se muestre en la ventana Output
        //io.getOut().reset(); //Para hacer un clear en la pantalla output
        io.select();

        // Obtén el escritor para escribir en la pestaña
        PrintWriter out = io.getOut();
        out.println(message);
        out.flush();
    }
    
    public void loadFile(FileObject fileObject) throws IOException {
        try {
            currentFile = fileObject;
            String content = new String(Files.readAllBytes(Paths.get(currentFile.getPath())));
            CodeEditor.setText(content);
            setDisplayName(currentFile.getNameExt()); // Cambiar el título del editor
        } catch (IOException e) {
            writeMessage("Error al abrir el archivo: " + e.getMessage());
        }
    }
    
    private void saveFile(FileObject fileObject) throws IOException {
        if (fileObject != null) {
            try {
                String content = CodeEditor.getText(); // Obtener el texto del editor
                File file = FileUtil.toFile(fileObject); // Convertir FileObject a File

                if (file != null) {
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                        writer.write(content); // Guardar el contenido en el archivo
                    }
                    writeMessage("Archivo guardado correctamente: " + file.getName());
                } else {
                    writeMessage("Error: No se pudo obtener el archivo del FileObject.");
                }
            } catch (IOException e) {
                writeMessage("Error al guardar el archivo: " + e.getMessage());
            }   
        }
    }
    
}
